{"version":3,"sources":["global/consts.js","global/functions.js","components/App.js","serviceWorker.js","index.js"],"names":["categories","primary","secondary","randomInt","max","min","arguments","length","undefined","Math","floor","random","count","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pick","randomize","bind","assertThisInitialized","setState","_categories$this$stat","secondaryPick","GOOGLE_SEARCH_URL","replace","react_default","a","createElement","className","onClick","href","rel","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAAMA,EAAa,CACf,CACIC,QAAS,UACTC,UAAW,CACP,YACA,eACA,aACA,YAGR,CACID,QAAS,UACTC,UAAW,CACP,SACA,eAGR,CACID,QAAS,WACTC,UAAW,CACP,QACA,UAGR,CACID,QAAS,QACTC,UAAW,MAEf,CACID,QAAS,MACTC,UAAW,MAEf,CACID,QAAS,QACTC,UAAW,MAEf,CACID,QAAS,SACTC,UAAW,MAEf,CACID,QAAS,UACTC,UAAW,MAEf,CACID,QAAS,WACTC,UAAW,CACP,WACA,WAGR,CACID,QAAS,SACTC,UAAW,MAEf,CACID,QAAS,QACTC,UAAW,MAEf,CACID,QAAS,UACTC,UAAW,CACP,aACA,aACA,eAGR,CACID,QAAS,YACTC,UAAW,MAEf,CACID,QAAS,QACTC,UAAW,CACP,SACA,kBAGR,CACID,QAAS,QACTC,UAAW,CACP,SACA,eAGR,CACID,QAAS,YACTC,UAAW,CACP,UACA,UACA,aACA,WC3FNC,EAAY,SAACC,GAAiB,IAAZC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,EAC1B,OAAOG,KAAKC,MAAMD,KAAKE,UAAYP,EAAMC,GAAOA,ICI9CO,SAAQZ,EAAWO,QA8CVM,cA3Cb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAMpB,EAAUS,IAGlBG,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPCA,2EAWlBG,KAAKS,SACH,CACEJ,KAAMpB,EAAUS,sCAKb,IAAAgB,EACwB5B,EAAWkB,KAAKI,MAAMC,MAA7CtB,EADD2B,EACC3B,QAASC,EADV0B,EACU1B,UACX2B,EAAiB3B,EAAaA,EAAUC,EAAUD,EAAUK,SAAW,MACvEuB,EAAoB,mCACxB7B,EAAQ8B,QAAQ,IAAI,MAClB7B,EAAa,IAAM2B,EAAcE,QAAQ,IAAI,KAAO,IACtD,gBAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBC,QAASlB,KAAKM,WAAnD,eACAQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdlC,EACD+B,EAAAC,EAAAC,cAAA,WACCL,GAEDG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBE,KAAMP,EAAmBQ,IAAI,sBAAsBC,OAAO,UAAzF,qBAtCUC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13de3f35.chunk.js","sourcesContent":["const categories = [\n    {\n        primary: 'Mexican',\n        secondary: [\n            'Authentic',\n            'Street Tacos',\n            'Restaurant',\n            'Seafood'\n        ]\n    },\n    {\n        primary: 'Chinese',\n        secondary: [\n            'Buffet',\n            'Restaurant'\n        ]\n    },\n    {\n        primary: 'Japanese',\n        secondary: [\n            'Ramen',\n            'Sushi'\n        ]\n    },\n    {\n        primary: 'Cajun',\n        secondary: null\n    },\n    {\n        primary: 'Pho',\n        secondary: null\n    },\n    {\n        primary: 'Curry',\n        secondary: null\n    },\n    {\n        primary: 'French',\n        secondary: null\n    },\n    {\n        primary: 'Italian',\n        secondary: null\n    },\n    {\n        primary: 'Barbecue',\n        secondary: [\n            'American',\n            'Korean'\n        ]\n    },\n    {\n        primary: 'German',\n        secondary: null\n    },\n    {\n        primary: 'Pizza',\n        secondary: null\n    },\n    {\n        primary: 'Burgers',\n        secondary: [\n            'Juicy Lucy',\n            'Restaurant',\n            'Sports Bar'\n        ]\n    },\n    {\n        primary: 'Soul Food',\n        secondary: null\n    },\n    {\n        primary: 'Greek',\n        secondary: [\n            'Heroes',\n            'Mediterranean',\n        ]\n    },\n    {\n        primary: 'Steak',\n        secondary: [\n            'Buffet',\n            'Restaurant'\n        ]\n    },\n    {\n        primary: 'Fast Food',\n        secondary: [\n            'Burgers',\n            'Chicken',\n            'Sandwiches',\n            'Tacos'\n        ]\n    },\n];\n\nexport {\n    categories\n};","const randomInt = (max, min = 0) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nexport {\n    randomInt\n}","import React, { Component } from 'react';\nimport { categories } from '../global/consts';\nimport { randomInt } from '../global/functions';\nimport './App.css';\n\nconst count = categories.length;\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      pick: randomInt(count)\n    }\n\n    this.randomize = this.randomize.bind(this);\n  }\n\n  randomize() {\n    this.setState(\n      {\n        pick: randomInt(count)\n      }\n    )\n  }\n\n  render() {\n    const { primary, secondary } = categories[this.state.pick];\n    const secondaryPick = (secondary) ? secondary[randomInt(secondary.length)] : '...';\n    const GOOGLE_SEARCH_URL = 'https://www.google.com/search?q='+\n      primary.replace(' ','+') +\n      ((secondary) ? '+' + secondaryPick.replace(' ','+') : '') +\n      '+food+near+me';\n    \n    return (\n      <div className=\"App\">\n        <h1>Food Picker</h1>\n        <button className='randomizeBtn btn' onClick={this.randomize}>Random Pick</button>\n        <hr />\n        <div className='picks'>\n        {primary}\n        <br />\n        {secondaryPick}\n        </div>\n        <hr />\n        <a className='googleItBtn btn' href={GOOGLE_SEARCH_URL} rel=\"noopener noreferrer\" target=\"_blank\">Google It</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}